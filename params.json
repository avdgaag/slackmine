{
  "name": "Slackmine",
  "tagline": "Query Redmine using Slack slash commands",
  "body": "# Slackmine\r\n\r\nElixir application for querying a Redmine application using Slack slash commands. For example, using `/redmine show 1234` will show information about a Redmine ticket with ID 1234.\r\n\r\n## Installation\r\n\r\nMake sure you have Elixir 1.3 installed, and you have cloned this repository. Fetch and compile the dependencies:\r\n\r\n```\r\n% mix do deps.get, deps.compile\r\n```\r\n\r\nFor development and testing mode, make sure you have a `config/secrets.exs` file with required configuration details. It should look like this:\r\n\r\n```elixir\r\nuse Mix.Config\r\nconfig :slackmine,\r\n  redmine_domain: \"http://url/to/redmine\",\r\n  redmine_api_key: \"your_api_key\"\r\n```\r\n\r\nThat's it!\r\n\r\n## Running the application\r\n\r\nRun the server:\r\n\r\n```\r\n% mix run --no-halt\r\n```\r\n\r\nNow you can see the application at http://localhost:4000 -- but there's not much to see there. The interesting bit happens when you POST something to `/command`:\r\n\r\n```\r\n% curl --request POST \\\r\n--data \"token=foobar\" \\\r\n--data \"text=show 1234\" \\\r\nhttp://localhost:4000/command\r\n```\r\n\r\nThis should give you a Slack-formatted JSON response.\r\n\r\n## Deployment\r\n\r\nDeploying this code to Heroku is easy thanks to the `app.json` included in this repo:\r\n\r\n[![Deploy](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy)\r\n\r\nWhen you do deploy, do make sure you set the environment variables `REDMINE_DOMAIN`, `REDMINE_API_KEY` and `SLACK_TOKEN` (that last one is used for authentication).\r\n\r\n## Configuration in Slack\r\n\r\nPlease refer to the Slack documentation on how to set up slash commands.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}